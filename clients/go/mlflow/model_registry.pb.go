// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: model_registry.proto

package mlflow

import (
	_ "github.com/microblink/mlflow/clients/go/mlflow/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelVersionStatus int32

const (
	// Request to register a new model version is pending as server performs background tasks.
	ModelVersionStatus_PENDING_REGISTRATION ModelVersionStatus = 1
	// Request to register a new model version has failed.
	ModelVersionStatus_FAILED_REGISTRATION ModelVersionStatus = 2
	// Model version is ready for use.
	ModelVersionStatus_READY ModelVersionStatus = 3
)

// Enum value maps for ModelVersionStatus.
var (
	ModelVersionStatus_name = map[int32]string{
		1: "PENDING_REGISTRATION",
		2: "FAILED_REGISTRATION",
		3: "READY",
	}
	ModelVersionStatus_value = map[string]int32{
		"PENDING_REGISTRATION": 1,
		"FAILED_REGISTRATION":  2,
		"READY":                3,
	}
)

func (x ModelVersionStatus) Enum() *ModelVersionStatus {
	p := new(ModelVersionStatus)
	*p = x
	return p
}

func (x ModelVersionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelVersionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_model_registry_proto_enumTypes[0].Descriptor()
}

func (ModelVersionStatus) Type() protoreflect.EnumType {
	return &file_model_registry_proto_enumTypes[0]
}

func (x ModelVersionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ModelVersionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ModelVersionStatus(num)
	return nil
}

// Deprecated: Use ModelVersionStatus.Descriptor instead.
func (ModelVersionStatus) EnumDescriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{0}
}

type RegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name for the model.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Timestamp recorded when this ``registered_model`` was created.
	CreationTimestamp *int64 `protobuf:"varint,2,opt,name=creation_timestamp,json=creationTimestamp" json:"creation_timestamp,omitempty"`
	// Timestamp recorded when metadata for this ``registered_model`` was last updated.
	LastUpdatedTimestamp *int64 `protobuf:"varint,3,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp" json:"last_updated_timestamp,omitempty"`
	// User that created this ``registered_model``
	// NOTE: this field is not currently returned.
	UserId *string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Description of this ``registered_model``.
	Description *string `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
	// Collection of latest model versions for each stage.
	// Only contains models with current ``READY`` status.
	LatestVersions []*ModelVersion `protobuf:"bytes,6,rep,name=latest_versions,json=latestVersions" json:"latest_versions,omitempty"`
	// Tags: Additional metadata key-value pairs for this ``registered_model``.
	Tags []*RegisteredModelTag `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
}

func (x *RegisteredModel) Reset() {
	*x = RegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModel) ProtoMessage() {}

func (x *RegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModel.ProtoReflect.Descriptor instead.
func (*RegisteredModel) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{0}
}

func (x *RegisteredModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RegisteredModel) GetCreationTimestamp() int64 {
	if x != nil && x.CreationTimestamp != nil {
		return *x.CreationTimestamp
	}
	return 0
}

func (x *RegisteredModel) GetLastUpdatedTimestamp() int64 {
	if x != nil && x.LastUpdatedTimestamp != nil {
		return *x.LastUpdatedTimestamp
	}
	return 0
}

func (x *RegisteredModel) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *RegisteredModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RegisteredModel) GetLatestVersions() []*ModelVersion {
	if x != nil {
		return x.LatestVersions
	}
	return nil
}

func (x *RegisteredModel) GetTags() []*RegisteredModelTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the model
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model's version number.
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Timestamp recorded when this ``model_version`` was created.
	CreationTimestamp *int64 `protobuf:"varint,3,opt,name=creation_timestamp,json=creationTimestamp" json:"creation_timestamp,omitempty"`
	// Timestamp recorded when metadata for this ``model_version`` was last updated.
	LastUpdatedTimestamp *int64 `protobuf:"varint,4,opt,name=last_updated_timestamp,json=lastUpdatedTimestamp" json:"last_updated_timestamp,omitempty"`
	// User that created this ``model_version``.
	UserId *string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Current stage for this ``model_version``.
	CurrentStage *string `protobuf:"bytes,6,opt,name=current_stage,json=currentStage" json:"current_stage,omitempty"`
	// Description of this ``model_version``.
	Description *string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// URI indicating the location of the source model artifacts, used when creating ``model_version``
	Source *string `protobuf:"bytes,8,opt,name=source" json:"source,omitempty"`
	// MLflow run ID used when creating ``model_version``, if ``source`` was generated by an
	// experiment run stored in MLflow tracking server.
	RunId *string `protobuf:"bytes,9,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// Current status of ``model_version``
	Status *ModelVersionStatus `protobuf:"varint,10,opt,name=status,enum=mlflow.ModelVersionStatus" json:"status,omitempty"`
	// Details on current ``status``, if it is pending or failed.
	StatusMessage *string `protobuf:"bytes,11,opt,name=status_message,json=statusMessage" json:"status_message,omitempty"`
	// Tags: Additional metadata key-value pairs for this ``model_version``.
	Tags []*ModelVersionTag `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty"`
	// Run Link: Direct link to the run that generated this version
	RunLink *string `protobuf:"bytes,13,opt,name=run_link,json=runLink" json:"run_link,omitempty"`
}

func (x *ModelVersion) Reset() {
	*x = ModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersion) ProtoMessage() {}

func (x *ModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersion.ProtoReflect.Descriptor instead.
func (*ModelVersion) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{1}
}

func (x *ModelVersion) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ModelVersion) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ModelVersion) GetCreationTimestamp() int64 {
	if x != nil && x.CreationTimestamp != nil {
		return *x.CreationTimestamp
	}
	return 0
}

func (x *ModelVersion) GetLastUpdatedTimestamp() int64 {
	if x != nil && x.LastUpdatedTimestamp != nil {
		return *x.LastUpdatedTimestamp
	}
	return 0
}

func (x *ModelVersion) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ModelVersion) GetCurrentStage() string {
	if x != nil && x.CurrentStage != nil {
		return *x.CurrentStage
	}
	return ""
}

func (x *ModelVersion) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ModelVersion) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ModelVersion) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *ModelVersion) GetStatus() ModelVersionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ModelVersionStatus_PENDING_REGISTRATION
}

func (x *ModelVersion) GetStatusMessage() string {
	if x != nil && x.StatusMessage != nil {
		return *x.StatusMessage
	}
	return ""
}

func (x *ModelVersion) GetTags() []*ModelVersionTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ModelVersion) GetRunLink() string {
	if x != nil && x.RunLink != nil {
		return *x.RunLink
	}
	return ""
}

type CreateRegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Register models under this name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Additional metadata for registered model.
	Tags []*RegisteredModelTag `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	// Optional description for registered model.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (x *CreateRegisteredModel) Reset() {
	*x = CreateRegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegisteredModel) ProtoMessage() {}

func (x *CreateRegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegisteredModel.ProtoReflect.Descriptor instead.
func (*CreateRegisteredModel) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRegisteredModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateRegisteredModel) GetTags() []*RegisteredModelTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateRegisteredModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type RenameRegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registered model unique name identifier.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If provided, updates the name for this ``registered_model``.
	NewName *string `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty"`
}

func (x *RenameRegisteredModel) Reset() {
	*x = RenameRegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRegisteredModel) ProtoMessage() {}

func (x *RenameRegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRegisteredModel.ProtoReflect.Descriptor instead.
func (*RenameRegisteredModel) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{3}
}

func (x *RenameRegisteredModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RenameRegisteredModel) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

type UpdateRegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registered model unique name identifier.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If provided, updates the description for this ``registered_model``.
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *UpdateRegisteredModel) Reset() {
	*x = UpdateRegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegisteredModel) ProtoMessage() {}

func (x *UpdateRegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegisteredModel.ProtoReflect.Descriptor instead.
func (*UpdateRegisteredModel) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRegisteredModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateRegisteredModel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type DeleteRegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registered model unique name identifier.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *DeleteRegisteredModel) Reset() {
	*x = DeleteRegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegisteredModel) ProtoMessage() {}

func (x *DeleteRegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegisteredModel.ProtoReflect.Descriptor instead.
func (*DeleteRegisteredModel) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteRegisteredModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetRegisteredModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registered model unique name identifier.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *GetRegisteredModel) Reset() {
	*x = GetRegisteredModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredModel) ProtoMessage() {}

func (x *GetRegisteredModel) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredModel.ProtoReflect.Descriptor instead.
func (*GetRegisteredModel) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{6}
}

func (x *GetRegisteredModel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ListRegisteredModels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of registered models desired. Max threshold is 1000.
	MaxResults *int64 `protobuf:"varint,1,opt,name=max_results,json=maxResults,def=100" json:"max_results,omitempty"`
	// Pagination token to go to the next page based on a previous query.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

// Default values for ListRegisteredModels fields.
const (
	Default_ListRegisteredModels_MaxResults = int64(100)
)

func (x *ListRegisteredModels) Reset() {
	*x = ListRegisteredModels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegisteredModels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegisteredModels) ProtoMessage() {}

func (x *ListRegisteredModels) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegisteredModels.ProtoReflect.Descriptor instead.
func (*ListRegisteredModels) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{7}
}

func (x *ListRegisteredModels) GetMaxResults() int64 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_ListRegisteredModels_MaxResults
}

func (x *ListRegisteredModels) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type SearchRegisteredModels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String filter condition, like "name LIKE 'my-model-name'".
	// Interpreted in the backend automatically as "name LIKE '%my-model-name%'".
	// Single boolean condition, with string values wrapped in single quotes.
	Filter *string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	// Maximum number of models desired. Default is 100. Max threshold is 1000.
	MaxResults *int64 `protobuf:"varint,2,opt,name=max_results,json=maxResults,def=100" json:"max_results,omitempty"`
	// List of columns for ordering search results, which can include model name and last updated
	// timestamp with an optional "DESC" or "ASC" annotation, where "ASC" is the default.
	// Tiebreaks are done by model name ASC.
	OrderBy []string `protobuf:"bytes,3,rep,name=order_by,json=orderBy" json:"order_by,omitempty"`
	// Pagination token to go to the next page based on a previous search query.
	PageToken *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

// Default values for SearchRegisteredModels fields.
const (
	Default_SearchRegisteredModels_MaxResults = int64(100)
)

func (x *SearchRegisteredModels) Reset() {
	*x = SearchRegisteredModels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRegisteredModels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRegisteredModels) ProtoMessage() {}

func (x *SearchRegisteredModels) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRegisteredModels.ProtoReflect.Descriptor instead.
func (*SearchRegisteredModels) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{8}
}

func (x *SearchRegisteredModels) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchRegisteredModels) GetMaxResults() int64 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchRegisteredModels_MaxResults
}

func (x *SearchRegisteredModels) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchRegisteredModels) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetLatestVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registered model unique name identifier.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// List of stages.
	Stages []string `protobuf:"bytes,2,rep,name=stages" json:"stages,omitempty"`
}

func (x *GetLatestVersions) Reset() {
	*x = GetLatestVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestVersions) ProtoMessage() {}

func (x *GetLatestVersions) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestVersions.ProtoReflect.Descriptor instead.
func (*GetLatestVersions) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{9}
}

func (x *GetLatestVersions) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetLatestVersions) GetStages() []string {
	if x != nil {
		return x.Stages
	}
	return nil
}

type CreateModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Register model under this name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// URI indicating the location of the model artifacts.
	Source *string `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	// MLflow run ID for correlation, if ``source`` was generated by an experiment run in
	// MLflow tracking server
	RunId *string `protobuf:"bytes,3,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// Additional metadata for model version.
	Tags []*ModelVersionTag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	// MLflow run link - this is the exact link of the run that generated this model version,
	// potentially hosted at another instance of MLflow.
	RunLink *string `protobuf:"bytes,5,opt,name=run_link,json=runLink" json:"run_link,omitempty"`
	// Optional description for model version.
	Description *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
}

func (x *CreateModelVersion) Reset() {
	*x = CreateModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModelVersion) ProtoMessage() {}

func (x *CreateModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModelVersion.ProtoReflect.Descriptor instead.
func (*CreateModelVersion) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{10}
}

func (x *CreateModelVersion) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateModelVersion) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *CreateModelVersion) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *CreateModelVersion) GetTags() []*ModelVersionTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateModelVersion) GetRunLink() string {
	if x != nil && x.RunLink != nil {
		return *x.RunLink
	}
	return ""
}

func (x *CreateModelVersion) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type UpdateModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// If provided, updates the description for this ``registered_model``.
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (x *UpdateModelVersion) Reset() {
	*x = UpdateModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelVersion) ProtoMessage() {}

func (x *UpdateModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelVersion.ProtoReflect.Descriptor instead.
func (*UpdateModelVersion) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateModelVersion) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateModelVersion) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *UpdateModelVersion) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type TransitionModelVersionStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Transition `model_version` to new stage.
	Stage *string `protobuf:"bytes,3,opt,name=stage" json:"stage,omitempty"`
	// When transitioning a model version to a particular stage, this flag dictates whether all
	// existing model versions in that stage should be atomically moved to the "archived" stage.
	// This ensures that at-most-one model version exists in the target stage.
	// This field is *required* when transitioning a model versions's stage
	ArchiveExistingVersions *bool `protobuf:"varint,4,opt,name=archive_existing_versions,json=archiveExistingVersions" json:"archive_existing_versions,omitempty"`
}

func (x *TransitionModelVersionStage) Reset() {
	*x = TransitionModelVersionStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionModelVersionStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionModelVersionStage) ProtoMessage() {}

func (x *TransitionModelVersionStage) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionModelVersionStage.ProtoReflect.Descriptor instead.
func (*TransitionModelVersionStage) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{12}
}

func (x *TransitionModelVersionStage) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TransitionModelVersionStage) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *TransitionModelVersionStage) GetStage() string {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return ""
}

func (x *TransitionModelVersionStage) GetArchiveExistingVersions() bool {
	if x != nil && x.ArchiveExistingVersions != nil {
		return *x.ArchiveExistingVersions
	}
	return false
}

type DeleteModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (x *DeleteModelVersion) Reset() {
	*x = DeleteModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersion) ProtoMessage() {}

func (x *DeleteModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersion.ProtoReflect.Descriptor instead.
func (*DeleteModelVersion) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteModelVersion) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeleteModelVersion) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type GetModelVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (x *GetModelVersion) Reset() {
	*x = GetModelVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersion) ProtoMessage() {}

func (x *GetModelVersion) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersion.ProtoReflect.Descriptor instead.
func (*GetModelVersion) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{14}
}

func (x *GetModelVersion) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetModelVersion) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type SearchModelVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String filter condition, like "name='my-model-name'". Must be a single boolean condition,
	// with string values wrapped in single quotes.
	Filter *string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	// Maximum number of models desired. Max threshold is 200K.
	MaxResults *int64 `protobuf:"varint,2,opt,name=max_results,json=maxResults,def=200000" json:"max_results,omitempty"`
	// List of columns to be ordered by including model name, version, stage with an
	// optional "DESC" or "ASC" annotation, where "ASC" is the default.
	// Tiebreaks are done by latest stage transition timestamp, followed by name ASC, followed by
	// version DESC.
	OrderBy []string `protobuf:"bytes,3,rep,name=order_by,json=orderBy" json:"order_by,omitempty"`
	// Pagination token to go to next page based on previous search query.
	PageToken *string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

// Default values for SearchModelVersions fields.
const (
	Default_SearchModelVersions_MaxResults = int64(200000)
)

func (x *SearchModelVersions) Reset() {
	*x = SearchModelVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchModelVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchModelVersions) ProtoMessage() {}

func (x *SearchModelVersions) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchModelVersions.ProtoReflect.Descriptor instead.
func (*SearchModelVersions) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{15}
}

func (x *SearchModelVersions) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SearchModelVersions) GetMaxResults() int64 {
	if x != nil && x.MaxResults != nil {
		return *x.MaxResults
	}
	return Default_SearchModelVersions_MaxResults
}

func (x *SearchModelVersions) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SearchModelVersions) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetModelVersionDownloadUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (x *GetModelVersionDownloadUri) Reset() {
	*x = GetModelVersionDownloadUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionDownloadUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionDownloadUri) ProtoMessage() {}

func (x *GetModelVersionDownloadUri) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionDownloadUri.ProtoReflect.Descriptor instead.
func (*GetModelVersionDownloadUri) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{16}
}

func (x *GetModelVersionDownloadUri) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetModelVersionDownloadUri) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

// Tag for a model version.
type ModelVersionTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The tag value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ModelVersionTag) Reset() {
	*x = ModelVersionTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelVersionTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelVersionTag) ProtoMessage() {}

func (x *ModelVersionTag) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelVersionTag.ProtoReflect.Descriptor instead.
func (*ModelVersionTag) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{17}
}

func (x *ModelVersionTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ModelVersionTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Tag for a registered model
type RegisteredModelTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tag key.
	Key *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The tag value.
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *RegisteredModelTag) Reset() {
	*x = RegisteredModelTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisteredModelTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredModelTag) ProtoMessage() {}

func (x *RegisteredModelTag) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredModelTag.ProtoReflect.Descriptor instead.
func (*RegisteredModelTag) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{18}
}

func (x *RegisteredModelTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *RegisteredModelTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SetRegisteredModelTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the model.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the tag. Maximum size depends on storage backend.
	// If a tag with this name already exists, its preexisting value will be replaced by the specified `value`.
	// All storage backends are guaranteed to support key values up to 250 bytes in size.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// String value of the tag being logged. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 5000 bytes in size.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *SetRegisteredModelTag) Reset() {
	*x = SetRegisteredModelTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRegisteredModelTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRegisteredModelTag) ProtoMessage() {}

func (x *SetRegisteredModelTag) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRegisteredModelTag.ProtoReflect.Descriptor instead.
func (*SetRegisteredModelTag) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{19}
}

func (x *SetRegisteredModelTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SetRegisteredModelTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SetRegisteredModelTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SetModelVersionTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the model.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number.
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Name of the tag. Maximum size depends on storage backend.
	// If a tag with this name already exists, its preexisting value will be replaced by the specified `value`.
	// All storage backends are guaranteed to support key values up to 250 bytes in size.
	Key *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// String value of the tag being logged. Maximum size depends on storage backend.
	// All storage backends are guaranteed to support key values up to 5000 bytes in size.
	Value *string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
}

func (x *SetModelVersionTag) Reset() {
	*x = SetModelVersionTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModelVersionTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModelVersionTag) ProtoMessage() {}

func (x *SetModelVersionTag) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModelVersionTag.ProtoReflect.Descriptor instead.
func (*SetModelVersionTag) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{20}
}

func (x *SetModelVersionTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SetModelVersionTag) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *SetModelVersionTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SetModelVersionTag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type DeleteRegisteredModelTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model that the tag was logged under.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the tag. The name must be an exact match; wild-card deletion is not supported. Maximum size is 250 bytes.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *DeleteRegisteredModelTag) Reset() {
	*x = DeleteRegisteredModelTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegisteredModelTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegisteredModelTag) ProtoMessage() {}

func (x *DeleteRegisteredModelTag) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegisteredModelTag.ProtoReflect.Descriptor instead.
func (*DeleteRegisteredModelTag) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRegisteredModelTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeleteRegisteredModelTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type DeleteModelVersionTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the registered model that the tag was logged under.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Model version number that the tag was logged under.
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	// Name of the tag. The name must be an exact match; wild-card deletion is not supported. Maximum size is 250 bytes.
	Key *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (x *DeleteModelVersionTag) Reset() {
	*x = DeleteModelVersionTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionTag) ProtoMessage() {}

func (x *DeleteModelVersionTag) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionTag.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionTag) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteModelVersionTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeleteModelVersionTag) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DeleteModelVersionTag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type CreateRegisteredModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel" json:"registered_model,omitempty"`
}

func (x *CreateRegisteredModel_Response) Reset() {
	*x = CreateRegisteredModel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegisteredModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegisteredModel_Response) ProtoMessage() {}

func (x *CreateRegisteredModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegisteredModel_Response.ProtoReflect.Descriptor instead.
func (*CreateRegisteredModel_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CreateRegisteredModel_Response) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

type RenameRegisteredModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel" json:"registered_model,omitempty"`
}

func (x *RenameRegisteredModel_Response) Reset() {
	*x = RenameRegisteredModel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameRegisteredModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameRegisteredModel_Response) ProtoMessage() {}

func (x *RenameRegisteredModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameRegisteredModel_Response.ProtoReflect.Descriptor instead.
func (*RenameRegisteredModel_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{3, 0}
}

func (x *RenameRegisteredModel_Response) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

type UpdateRegisteredModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel" json:"registered_model,omitempty"`
}

func (x *UpdateRegisteredModel_Response) Reset() {
	*x = UpdateRegisteredModel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegisteredModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegisteredModel_Response) ProtoMessage() {}

func (x *UpdateRegisteredModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegisteredModel_Response.ProtoReflect.Descriptor instead.
func (*UpdateRegisteredModel_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{4, 0}
}

func (x *UpdateRegisteredModel_Response) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

type DeleteRegisteredModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRegisteredModel_Response) Reset() {
	*x = DeleteRegisteredModel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegisteredModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegisteredModel_Response) ProtoMessage() {}

func (x *DeleteRegisteredModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegisteredModel_Response.ProtoReflect.Descriptor instead.
func (*DeleteRegisteredModel_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{5, 0}
}

type GetRegisteredModel_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModel *RegisteredModel `protobuf:"bytes,1,opt,name=registered_model,json=registeredModel" json:"registered_model,omitempty"`
}

func (x *GetRegisteredModel_Response) Reset() {
	*x = GetRegisteredModel_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegisteredModel_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegisteredModel_Response) ProtoMessage() {}

func (x *GetRegisteredModel_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegisteredModel_Response.ProtoReflect.Descriptor instead.
func (*GetRegisteredModel_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetRegisteredModel_Response) GetRegisteredModel() *RegisteredModel {
	if x != nil {
		return x.RegisteredModel
	}
	return nil
}

type ListRegisteredModels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegisteredModels []*RegisteredModel `protobuf:"bytes,1,rep,name=registered_models,json=registeredModels" json:"registered_models,omitempty"`
	// Pagination token to request next page of models for the same query.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *ListRegisteredModels_Response) Reset() {
	*x = ListRegisteredModels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegisteredModels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegisteredModels_Response) ProtoMessage() {}

func (x *ListRegisteredModels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegisteredModels_Response.ProtoReflect.Descriptor instead.
func (*ListRegisteredModels_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListRegisteredModels_Response) GetRegisteredModels() []*RegisteredModel {
	if x != nil {
		return x.RegisteredModels
	}
	return nil
}

func (x *ListRegisteredModels_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type SearchRegisteredModels_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registered Models that match the search criteria.
	RegisteredModels []*RegisteredModel `protobuf:"bytes,1,rep,name=registered_models,json=registeredModels" json:"registered_models,omitempty"`
	// Pagination token to request the next page of models.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *SearchRegisteredModels_Response) Reset() {
	*x = SearchRegisteredModels_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRegisteredModels_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRegisteredModels_Response) ProtoMessage() {}

func (x *SearchRegisteredModels_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRegisteredModels_Response.ProtoReflect.Descriptor instead.
func (*SearchRegisteredModels_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SearchRegisteredModels_Response) GetRegisteredModels() []*RegisteredModel {
	if x != nil {
		return x.RegisteredModels
	}
	return nil
}

func (x *SearchRegisteredModels_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetLatestVersions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latest version models for each requests stage. Only return models with current ``READY`` status.
	// If no ``stages`` provided, returns the latest version for each stage, including ``"None"``.
	ModelVersions []*ModelVersion `protobuf:"bytes,1,rep,name=model_versions,json=modelVersions" json:"model_versions,omitempty"`
}

func (x *GetLatestVersions_Response) Reset() {
	*x = GetLatestVersions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestVersions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestVersions_Response) ProtoMessage() {}

func (x *GetLatestVersions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestVersions_Response.ProtoReflect.Descriptor instead.
func (*GetLatestVersions_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{9, 0}
}

func (x *GetLatestVersions_Response) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

type CreateModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return new version number generated for this model in registry.
	ModelVersion *ModelVersion `protobuf:"bytes,1,opt,name=model_version,json=modelVersion" json:"model_version,omitempty"`
}

func (x *CreateModelVersion_Response) Reset() {
	*x = CreateModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateModelVersion_Response) ProtoMessage() {}

func (x *CreateModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateModelVersion_Response.ProtoReflect.Descriptor instead.
func (*CreateModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{10, 0}
}

func (x *CreateModelVersion_Response) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type UpdateModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return new version number generated for this model in registry.
	ModelVersion *ModelVersion `protobuf:"bytes,1,opt,name=model_version,json=modelVersion" json:"model_version,omitempty"`
}

func (x *UpdateModelVersion_Response) Reset() {
	*x = UpdateModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelVersion_Response) ProtoMessage() {}

func (x *UpdateModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelVersion_Response.ProtoReflect.Descriptor instead.
func (*UpdateModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{11, 0}
}

func (x *UpdateModelVersion_Response) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type TransitionModelVersionStage_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Updated model version
	ModelVersion *ModelVersion `protobuf:"bytes,1,opt,name=model_version,json=modelVersion" json:"model_version,omitempty"`
}

func (x *TransitionModelVersionStage_Response) Reset() {
	*x = TransitionModelVersionStage_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitionModelVersionStage_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitionModelVersionStage_Response) ProtoMessage() {}

func (x *TransitionModelVersionStage_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitionModelVersionStage_Response.ProtoReflect.Descriptor instead.
func (*TransitionModelVersionStage_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TransitionModelVersionStage_Response) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type DeleteModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteModelVersion_Response) Reset() {
	*x = DeleteModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersion_Response) ProtoMessage() {}

func (x *DeleteModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersion_Response.ProtoReflect.Descriptor instead.
func (*DeleteModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{13, 0}
}

type GetModelVersion_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelVersion *ModelVersion `protobuf:"bytes,1,opt,name=model_version,json=modelVersion" json:"model_version,omitempty"`
}

func (x *GetModelVersion_Response) Reset() {
	*x = GetModelVersion_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersion_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersion_Response) ProtoMessage() {}

func (x *GetModelVersion_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersion_Response.ProtoReflect.Descriptor instead.
func (*GetModelVersion_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetModelVersion_Response) GetModelVersion() *ModelVersion {
	if x != nil {
		return x.ModelVersion
	}
	return nil
}

type SearchModelVersions_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Models that match the search criteria
	ModelVersions []*ModelVersion `protobuf:"bytes,1,rep,name=model_versions,json=modelVersions" json:"model_versions,omitempty"`
	// Pagination token to request next page of models for the same search query.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *SearchModelVersions_Response) Reset() {
	*x = SearchModelVersions_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchModelVersions_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchModelVersions_Response) ProtoMessage() {}

func (x *SearchModelVersions_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchModelVersions_Response.ProtoReflect.Descriptor instead.
func (*SearchModelVersions_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{15, 0}
}

func (x *SearchModelVersions_Response) GetModelVersions() []*ModelVersion {
	if x != nil {
		return x.ModelVersions
	}
	return nil
}

func (x *SearchModelVersions_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetModelVersionDownloadUri_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI corresponding to where artifacts for this model version are stored.
	ArtifactUri *string `protobuf:"bytes,1,opt,name=artifact_uri,json=artifactUri" json:"artifact_uri,omitempty"`
}

func (x *GetModelVersionDownloadUri_Response) Reset() {
	*x = GetModelVersionDownloadUri_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelVersionDownloadUri_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelVersionDownloadUri_Response) ProtoMessage() {}

func (x *GetModelVersionDownloadUri_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelVersionDownloadUri_Response.ProtoReflect.Descriptor instead.
func (*GetModelVersionDownloadUri_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetModelVersionDownloadUri_Response) GetArtifactUri() string {
	if x != nil && x.ArtifactUri != nil {
		return *x.ArtifactUri
	}
	return ""
}

type SetRegisteredModelTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetRegisteredModelTag_Response) Reset() {
	*x = SetRegisteredModelTag_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRegisteredModelTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRegisteredModelTag_Response) ProtoMessage() {}

func (x *SetRegisteredModelTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRegisteredModelTag_Response.ProtoReflect.Descriptor instead.
func (*SetRegisteredModelTag_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{19, 0}
}

type SetModelVersionTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetModelVersionTag_Response) Reset() {
	*x = SetModelVersionTag_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetModelVersionTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetModelVersionTag_Response) ProtoMessage() {}

func (x *SetModelVersionTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetModelVersionTag_Response.ProtoReflect.Descriptor instead.
func (*SetModelVersionTag_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{20, 0}
}

type DeleteRegisteredModelTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRegisteredModelTag_Response) Reset() {
	*x = DeleteRegisteredModelTag_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegisteredModelTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegisteredModelTag_Response) ProtoMessage() {}

func (x *DeleteRegisteredModelTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegisteredModelTag_Response.ProtoReflect.Descriptor instead.
func (*DeleteRegisteredModelTag_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{21, 0}
}

type DeleteModelVersionTag_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteModelVersionTag_Response) Reset() {
	*x = DeleteModelVersionTag_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_model_registry_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteModelVersionTag_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteModelVersionTag_Response) ProtoMessage() {}

func (x *DeleteModelVersionTag_Response) ProtoReflect() protoreflect.Message {
	mi := &file_model_registry_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteModelVersionTag_Response.ProtoReflect.Descriptor instead.
func (*DeleteModelVersionTag_Response) Descriptor() ([]byte, []int) {
	return file_model_registry_proto_rawDescGZIP(), []int{22, 0}
}

var File_model_registry_proto protoreflect.FileDescriptor

var file_model_registry_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x15,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34,
	0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xd3,
	0x03, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x80, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86,
	0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4e, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5d, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4e, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x6a, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0x22, 0xab, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x4e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x22, 0x82, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x03,
	0x31, 0x30, 0x30, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x78,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xb7, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x03, 0x31,
	0x30, 0x30, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x78, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b,
	0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22,
	0xbb, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xc1, 0x02,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50,
	0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5d, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28,
	0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x40,
	0x0a, 0x19, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x17, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x45, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5d, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xbf,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x45, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x22, 0xae, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x06, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x6f, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50,
	0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5d, 0x22, 0xb2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69,
	0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x2d, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x72, 0x69, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x39, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x3c, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9e, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0x22, 0xbb, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0x85,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x0a, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b, 0xe2, 0x3f, 0x28, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xf8, 0x86, 0x19, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19,
	0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x1a, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x2b,
	0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d, 0x2a, 0x52, 0x0a, 0x12, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x32,
	0xb7, 0x23, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe8, 0x01, 0x0a, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0xf2, 0x86, 0x19, 0x82,
	0x01, 0x0a, 0x36, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x28, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2e, 0x0a, 0x04, 0x50, 0x4f, 0x53,
	0x54, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0xe8, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x26, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0xf2, 0x86, 0x19, 0x82, 0x01, 0x0a, 0x36, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x12, 0x28, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x0a, 0x2e, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x20, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x16, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xea,
	0x01, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x89, 0x01, 0xf2, 0x86, 0x19, 0x84, 0x01, 0x0a, 0x37, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48,
	0x12, 0x28, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x0a, 0x2f, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x10, 0x01, 0x2a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xec, 0x01, 0x0a, 0x15,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0xf2,
	0x86, 0x19, 0x86, 0x01, 0x0a, 0x38, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x28,
	0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x30,
	0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x10, 0x01, 0x2a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0xd2, 0x01, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x23, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x7b, 0xf2, 0x86, 0x19, 0x77, 0x0a, 0x32, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12,
	0x25, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2a, 0x0a, 0x03,
	0x47, 0x45, 0x54, 0x12, 0x1d, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x20,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0xea, 0x01, 0x0a, 0x16, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x27, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0xf2, 0x86, 0x19, 0x81, 0x01, 0x0a, 0x35, 0x0a, 0x03, 0x47,
	0x45, 0x54, 0x12, 0x28, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x02,
	0x10, 0x00, 0x0a, 0x2d, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x20, 0x2f, 0x6d, 0x6c, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x10, 0x01, 0x2a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xdc, 0x01, 0x0a,
	0x14, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x1a, 0x25, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0xf2, 0x86, 0x19, 0x7b,
	0x0a, 0x33, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x26, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2b, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x1e, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x04, 0x08, 0x02,
	0x10, 0x00, 0x10, 0x01, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xb3, 0x02, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x19, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x22, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xde, 0x01, 0xf2, 0x86, 0x19, 0xd9, 0x01, 0x0a, 0x3b, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x12, 0x2d, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x42, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x35, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x3a, 0x0a, 0x03, 0x47, 0x45, 0x54,
	0x12, 0x2d, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xd4, 0x01, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0xf2, 0x86, 0x19, 0x79, 0x0a,
	0x33, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x25, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x04,
	0x08, 0x02, 0x10, 0x00, 0x0a, 0x2b, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x1d, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x10, 0x01, 0x2a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xd6, 0x01, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x7f, 0xf2, 0x86, 0x19, 0x7b, 0x0a, 0x34, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x12,
	0x25, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2c, 0x0a, 0x05,
	0x50, 0x41, 0x54, 0x43, 0x48, 0x12, 0x1d, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x8f, 0x02, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x2c, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0xf2, 0x86, 0x19, 0x97, 0x01, 0x0a, 0x3d, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x12, 0x2f, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x35, 0x0a, 0x04, 0x50,
	0x4f, 0x53, 0x54, 0x12, 0x27, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x04, 0x08, 0x02,
	0x10, 0x00, 0x10, 0x01, 0x2a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0xf2, 0x86,
	0x19, 0x7d, 0x0a, 0x35, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x25, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2d, 0x0a, 0x06, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x12, 0x1d, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0xc0, 0x01, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72,
	0xf2, 0x86, 0x19, 0x6e, 0x0a, 0x2f, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x22, 0x2f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x1a,
	0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x27, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x1a, 0x2f, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01,
	0x2a, 0x10, 0x47, 0x65, 0x74, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0xd6, 0x01, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0xf2,
	0x86, 0x19, 0x78, 0x0a, 0x32, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x25, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2a, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x1d,
	0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x98, 0x02, 0x0a, 0x1a,
	0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69, 0x12, 0x22, 0x2e, 0x6d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x69, 0x1a, 0x2b,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0xf2, 0x86,
	0x19, 0xa3, 0x01, 0x0a, 0x3c, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x2f, 0x2f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x75, 0x72, 0x69, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x0a, 0x34, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x12, 0x27, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x75, 0x72,
	0x69, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x55, 0x52, 0x49, 0x20, 0x46, 0x6f, 0x72, 0x20,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0xec, 0x01, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x1a,
	0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0xf2, 0x86, 0x19, 0x86, 0x01, 0x0a,
	0x37, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x29, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x74,
	0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2f, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x12, 0x21, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d,
	0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x18, 0x53, 0x65, 0x74,
	0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x20, 0x54, 0x61, 0x67, 0x12, 0xd9, 0x01, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x1a, 0x23, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01,
	0xf2, 0x86, 0x19, 0x7d, 0x0a, 0x34, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x12, 0x26, 0x2f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74,
	0x2d, 0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x2c, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x12, 0x1e, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x2d, 0x74,
	0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x15, 0x53, 0x65, 0x74, 0x20,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x61,
	0x67, 0x12, 0x82, 0x02, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67, 0x12, 0x20,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x1a, 0x29, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0xf2, 0x86,
	0x19, 0x93, 0x01, 0x0a, 0x3c, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x2c, 0x2f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10,
	0x00, 0x0a, 0x34, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x24, 0x2f, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x61,
	0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x20, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x20, 0x54, 0x61, 0x67, 0x12, 0xf0, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67,
	0x12, 0x1d, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x1a,
	0x26, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f, 0x01, 0xf2, 0x86, 0x19, 0x8a, 0x01, 0x0a,
	0x39, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x12, 0x29, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x0a, 0x31, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x12, 0x21, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00, 0x10, 0x01, 0x2a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x61, 0x67, 0x42, 0x51, 0x0a, 0x14, 0x6f, 0x72, 0x67,
	0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f,
	0x77, 0x90, 0x01, 0x01, 0xa0, 0x01, 0x01, 0xe2, 0x3f, 0x02, 0x10, 0x01,
}

var (
	file_model_registry_proto_rawDescOnce sync.Once
	file_model_registry_proto_rawDescData = file_model_registry_proto_rawDesc
)

func file_model_registry_proto_rawDescGZIP() []byte {
	file_model_registry_proto_rawDescOnce.Do(func() {
		file_model_registry_proto_rawDescData = protoimpl.X.CompressGZIP(file_model_registry_proto_rawDescData)
	})
	return file_model_registry_proto_rawDescData
}

var file_model_registry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_model_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_model_registry_proto_goTypes = []interface{}{
	(ModelVersionStatus)(0),                      // 0: mlflow.ModelVersionStatus
	(*RegisteredModel)(nil),                      // 1: mlflow.RegisteredModel
	(*ModelVersion)(nil),                         // 2: mlflow.ModelVersion
	(*CreateRegisteredModel)(nil),                // 3: mlflow.CreateRegisteredModel
	(*RenameRegisteredModel)(nil),                // 4: mlflow.RenameRegisteredModel
	(*UpdateRegisteredModel)(nil),                // 5: mlflow.UpdateRegisteredModel
	(*DeleteRegisteredModel)(nil),                // 6: mlflow.DeleteRegisteredModel
	(*GetRegisteredModel)(nil),                   // 7: mlflow.GetRegisteredModel
	(*ListRegisteredModels)(nil),                 // 8: mlflow.ListRegisteredModels
	(*SearchRegisteredModels)(nil),               // 9: mlflow.SearchRegisteredModels
	(*GetLatestVersions)(nil),                    // 10: mlflow.GetLatestVersions
	(*CreateModelVersion)(nil),                   // 11: mlflow.CreateModelVersion
	(*UpdateModelVersion)(nil),                   // 12: mlflow.UpdateModelVersion
	(*TransitionModelVersionStage)(nil),          // 13: mlflow.TransitionModelVersionStage
	(*DeleteModelVersion)(nil),                   // 14: mlflow.DeleteModelVersion
	(*GetModelVersion)(nil),                      // 15: mlflow.GetModelVersion
	(*SearchModelVersions)(nil),                  // 16: mlflow.SearchModelVersions
	(*GetModelVersionDownloadUri)(nil),           // 17: mlflow.GetModelVersionDownloadUri
	(*ModelVersionTag)(nil),                      // 18: mlflow.ModelVersionTag
	(*RegisteredModelTag)(nil),                   // 19: mlflow.RegisteredModelTag
	(*SetRegisteredModelTag)(nil),                // 20: mlflow.SetRegisteredModelTag
	(*SetModelVersionTag)(nil),                   // 21: mlflow.SetModelVersionTag
	(*DeleteRegisteredModelTag)(nil),             // 22: mlflow.DeleteRegisteredModelTag
	(*DeleteModelVersionTag)(nil),                // 23: mlflow.DeleteModelVersionTag
	(*CreateRegisteredModel_Response)(nil),       // 24: mlflow.CreateRegisteredModel.Response
	(*RenameRegisteredModel_Response)(nil),       // 25: mlflow.RenameRegisteredModel.Response
	(*UpdateRegisteredModel_Response)(nil),       // 26: mlflow.UpdateRegisteredModel.Response
	(*DeleteRegisteredModel_Response)(nil),       // 27: mlflow.DeleteRegisteredModel.Response
	(*GetRegisteredModel_Response)(nil),          // 28: mlflow.GetRegisteredModel.Response
	(*ListRegisteredModels_Response)(nil),        // 29: mlflow.ListRegisteredModels.Response
	(*SearchRegisteredModels_Response)(nil),      // 30: mlflow.SearchRegisteredModels.Response
	(*GetLatestVersions_Response)(nil),           // 31: mlflow.GetLatestVersions.Response
	(*CreateModelVersion_Response)(nil),          // 32: mlflow.CreateModelVersion.Response
	(*UpdateModelVersion_Response)(nil),          // 33: mlflow.UpdateModelVersion.Response
	(*TransitionModelVersionStage_Response)(nil), // 34: mlflow.TransitionModelVersionStage.Response
	(*DeleteModelVersion_Response)(nil),          // 35: mlflow.DeleteModelVersion.Response
	(*GetModelVersion_Response)(nil),             // 36: mlflow.GetModelVersion.Response
	(*SearchModelVersions_Response)(nil),         // 37: mlflow.SearchModelVersions.Response
	(*GetModelVersionDownloadUri_Response)(nil),  // 38: mlflow.GetModelVersionDownloadUri.Response
	(*SetRegisteredModelTag_Response)(nil),       // 39: mlflow.SetRegisteredModelTag.Response
	(*SetModelVersionTag_Response)(nil),          // 40: mlflow.SetModelVersionTag.Response
	(*DeleteRegisteredModelTag_Response)(nil),    // 41: mlflow.DeleteRegisteredModelTag.Response
	(*DeleteModelVersionTag_Response)(nil),       // 42: mlflow.DeleteModelVersionTag.Response
}
var file_model_registry_proto_depIdxs = []int32{
	2,  // 0: mlflow.RegisteredModel.latest_versions:type_name -> mlflow.ModelVersion
	19, // 1: mlflow.RegisteredModel.tags:type_name -> mlflow.RegisteredModelTag
	0,  // 2: mlflow.ModelVersion.status:type_name -> mlflow.ModelVersionStatus
	18, // 3: mlflow.ModelVersion.tags:type_name -> mlflow.ModelVersionTag
	19, // 4: mlflow.CreateRegisteredModel.tags:type_name -> mlflow.RegisteredModelTag
	18, // 5: mlflow.CreateModelVersion.tags:type_name -> mlflow.ModelVersionTag
	1,  // 6: mlflow.CreateRegisteredModel.Response.registered_model:type_name -> mlflow.RegisteredModel
	1,  // 7: mlflow.RenameRegisteredModel.Response.registered_model:type_name -> mlflow.RegisteredModel
	1,  // 8: mlflow.UpdateRegisteredModel.Response.registered_model:type_name -> mlflow.RegisteredModel
	1,  // 9: mlflow.GetRegisteredModel.Response.registered_model:type_name -> mlflow.RegisteredModel
	1,  // 10: mlflow.ListRegisteredModels.Response.registered_models:type_name -> mlflow.RegisteredModel
	1,  // 11: mlflow.SearchRegisteredModels.Response.registered_models:type_name -> mlflow.RegisteredModel
	2,  // 12: mlflow.GetLatestVersions.Response.model_versions:type_name -> mlflow.ModelVersion
	2,  // 13: mlflow.CreateModelVersion.Response.model_version:type_name -> mlflow.ModelVersion
	2,  // 14: mlflow.UpdateModelVersion.Response.model_version:type_name -> mlflow.ModelVersion
	2,  // 15: mlflow.TransitionModelVersionStage.Response.model_version:type_name -> mlflow.ModelVersion
	2,  // 16: mlflow.GetModelVersion.Response.model_version:type_name -> mlflow.ModelVersion
	2,  // 17: mlflow.SearchModelVersions.Response.model_versions:type_name -> mlflow.ModelVersion
	3,  // 18: mlflow.ModelRegistryService.createRegisteredModel:input_type -> mlflow.CreateRegisteredModel
	4,  // 19: mlflow.ModelRegistryService.renameRegisteredModel:input_type -> mlflow.RenameRegisteredModel
	5,  // 20: mlflow.ModelRegistryService.updateRegisteredModel:input_type -> mlflow.UpdateRegisteredModel
	6,  // 21: mlflow.ModelRegistryService.deleteRegisteredModel:input_type -> mlflow.DeleteRegisteredModel
	7,  // 22: mlflow.ModelRegistryService.getRegisteredModel:input_type -> mlflow.GetRegisteredModel
	9,  // 23: mlflow.ModelRegistryService.searchRegisteredModels:input_type -> mlflow.SearchRegisteredModels
	8,  // 24: mlflow.ModelRegistryService.listRegisteredModels:input_type -> mlflow.ListRegisteredModels
	10, // 25: mlflow.ModelRegistryService.getLatestVersions:input_type -> mlflow.GetLatestVersions
	11, // 26: mlflow.ModelRegistryService.createModelVersion:input_type -> mlflow.CreateModelVersion
	12, // 27: mlflow.ModelRegistryService.updateModelVersion:input_type -> mlflow.UpdateModelVersion
	13, // 28: mlflow.ModelRegistryService.transitionModelVersionStage:input_type -> mlflow.TransitionModelVersionStage
	14, // 29: mlflow.ModelRegistryService.deleteModelVersion:input_type -> mlflow.DeleteModelVersion
	15, // 30: mlflow.ModelRegistryService.getModelVersion:input_type -> mlflow.GetModelVersion
	16, // 31: mlflow.ModelRegistryService.searchModelVersions:input_type -> mlflow.SearchModelVersions
	17, // 32: mlflow.ModelRegistryService.getModelVersionDownloadUri:input_type -> mlflow.GetModelVersionDownloadUri
	20, // 33: mlflow.ModelRegistryService.setRegisteredModelTag:input_type -> mlflow.SetRegisteredModelTag
	21, // 34: mlflow.ModelRegistryService.setModelVersionTag:input_type -> mlflow.SetModelVersionTag
	22, // 35: mlflow.ModelRegistryService.deleteRegisteredModelTag:input_type -> mlflow.DeleteRegisteredModelTag
	23, // 36: mlflow.ModelRegistryService.deleteModelVersionTag:input_type -> mlflow.DeleteModelVersionTag
	24, // 37: mlflow.ModelRegistryService.createRegisteredModel:output_type -> mlflow.CreateRegisteredModel.Response
	25, // 38: mlflow.ModelRegistryService.renameRegisteredModel:output_type -> mlflow.RenameRegisteredModel.Response
	26, // 39: mlflow.ModelRegistryService.updateRegisteredModel:output_type -> mlflow.UpdateRegisteredModel.Response
	27, // 40: mlflow.ModelRegistryService.deleteRegisteredModel:output_type -> mlflow.DeleteRegisteredModel.Response
	28, // 41: mlflow.ModelRegistryService.getRegisteredModel:output_type -> mlflow.GetRegisteredModel.Response
	30, // 42: mlflow.ModelRegistryService.searchRegisteredModels:output_type -> mlflow.SearchRegisteredModels.Response
	29, // 43: mlflow.ModelRegistryService.listRegisteredModels:output_type -> mlflow.ListRegisteredModels.Response
	31, // 44: mlflow.ModelRegistryService.getLatestVersions:output_type -> mlflow.GetLatestVersions.Response
	32, // 45: mlflow.ModelRegistryService.createModelVersion:output_type -> mlflow.CreateModelVersion.Response
	33, // 46: mlflow.ModelRegistryService.updateModelVersion:output_type -> mlflow.UpdateModelVersion.Response
	34, // 47: mlflow.ModelRegistryService.transitionModelVersionStage:output_type -> mlflow.TransitionModelVersionStage.Response
	35, // 48: mlflow.ModelRegistryService.deleteModelVersion:output_type -> mlflow.DeleteModelVersion.Response
	36, // 49: mlflow.ModelRegistryService.getModelVersion:output_type -> mlflow.GetModelVersion.Response
	37, // 50: mlflow.ModelRegistryService.searchModelVersions:output_type -> mlflow.SearchModelVersions.Response
	38, // 51: mlflow.ModelRegistryService.getModelVersionDownloadUri:output_type -> mlflow.GetModelVersionDownloadUri.Response
	39, // 52: mlflow.ModelRegistryService.setRegisteredModelTag:output_type -> mlflow.SetRegisteredModelTag.Response
	40, // 53: mlflow.ModelRegistryService.setModelVersionTag:output_type -> mlflow.SetModelVersionTag.Response
	41, // 54: mlflow.ModelRegistryService.deleteRegisteredModelTag:output_type -> mlflow.DeleteRegisteredModelTag.Response
	42, // 55: mlflow.ModelRegistryService.deleteModelVersionTag:output_type -> mlflow.DeleteModelVersionTag.Response
	37, // [37:56] is the sub-list for method output_type
	18, // [18:37] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_model_registry_proto_init() }
func file_model_registry_proto_init() {
	if File_model_registry_proto != nil {
		return
	}
	file_databricks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_model_registry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegisteredModels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRegisteredModels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionModelVersionStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchModelVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionDownloadUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelVersionTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisteredModelTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRegisteredModelTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModelVersionTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegisteredModelTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegisteredModel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameRegisteredModel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegisteredModel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegisteredModel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegisteredModel_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegisteredModels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRegisteredModels_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestVersions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransitionModelVersionStage_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersion_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchModelVersions_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelVersionDownloadUri_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRegisteredModelTag_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetModelVersionTag_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegisteredModelTag_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_model_registry_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteModelVersionTag_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_model_registry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_model_registry_proto_goTypes,
		DependencyIndexes: file_model_registry_proto_depIdxs,
		EnumInfos:         file_model_registry_proto_enumTypes,
		MessageInfos:      file_model_registry_proto_msgTypes,
	}.Build()
	File_model_registry_proto = out.File
	file_model_registry_proto_rawDesc = nil
	file_model_registry_proto_goTypes = nil
	file_model_registry_proto_depIdxs = nil
}
