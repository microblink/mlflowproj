// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: databricks_artifacts.proto

package mlflow

import (
	_ "github.com/microblink/mlflow/clients/go/mlflow/scalapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of a given artifact access credential
type ArtifactCredentialType int32

const (
	// The credential is an Azure Shared Access Signature URI. For more information, see
	// https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview
	ArtifactCredentialType_AZURE_SAS_URI ArtifactCredentialType = 1
	// The credential is an AWS Presigned URL. For more information, see
	// https://docs.aws.amazon.com/AmazonS3/latest/dev/ShareObjectPreSignedURL.html
	ArtifactCredentialType_AWS_PRESIGNED_URL ArtifactCredentialType = 2
	// The credential is a GCP Signed URL. For more information, see
	// https://cloud.google.com/storage/docs/access-control/signed-urls
	ArtifactCredentialType_GCP_SIGNED_URL ArtifactCredentialType = 3
)

// Enum value maps for ArtifactCredentialType.
var (
	ArtifactCredentialType_name = map[int32]string{
		1: "AZURE_SAS_URI",
		2: "AWS_PRESIGNED_URL",
		3: "GCP_SIGNED_URL",
	}
	ArtifactCredentialType_value = map[string]int32{
		"AZURE_SAS_URI":     1,
		"AWS_PRESIGNED_URL": 2,
		"GCP_SIGNED_URL":    3,
	}
)

func (x ArtifactCredentialType) Enum() *ArtifactCredentialType {
	p := new(ArtifactCredentialType)
	*p = x
	return p
}

func (x ArtifactCredentialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactCredentialType) Descriptor() protoreflect.EnumDescriptor {
	return file_databricks_artifacts_proto_enumTypes[0].Descriptor()
}

func (ArtifactCredentialType) Type() protoreflect.EnumType {
	return &file_databricks_artifacts_proto_enumTypes[0]
}

func (x ArtifactCredentialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactCredentialType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactCredentialType(num)
	return nil
}

// Deprecated: Use ArtifactCredentialType.Descriptor instead.
func (ArtifactCredentialType) EnumDescriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{0}
}

type ArtifactCredentialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the MLflow Run containing the artifact that can be accessed
	// with the credential
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// The path, relative to the Run's artifact root location, of the artifact
	// that can be accessed with the credential
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// The signed URI credential that provides access to the artifact
	SignedUri *string `protobuf:"bytes,3,opt,name=signed_uri,json=signedUri" json:"signed_uri,omitempty"`
	// A collection of HTTP headers that should be specified when uploading to
	// or downloading from the specified `signed_uri`
	Headers []*ArtifactCredentialInfo_HttpHeader `protobuf:"bytes,4,rep,name=headers" json:"headers,omitempty"`
	// The type of the signed credential URI (e.g., an AWS presigned URL
	// or an Azure Shared Access Signature URI)
	Type *ArtifactCredentialType `protobuf:"varint,5,opt,name=type,enum=mlflow.ArtifactCredentialType" json:"type,omitempty"`
}

func (x *ArtifactCredentialInfo) Reset() {
	*x = ArtifactCredentialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCredentialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCredentialInfo) ProtoMessage() {}

func (x *ArtifactCredentialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCredentialInfo.ProtoReflect.Descriptor instead.
func (*ArtifactCredentialInfo) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactCredentialInfo) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *ArtifactCredentialInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ArtifactCredentialInfo) GetSignedUri() string {
	if x != nil && x.SignedUri != nil {
		return *x.SignedUri
	}
	return ""
}

func (x *ArtifactCredentialInfo) GetHeaders() []*ArtifactCredentialInfo_HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ArtifactCredentialInfo) GetType() ArtifactCredentialType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ArtifactCredentialType_AZURE_SAS_URI
}

type GetCredentialsForRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the MLflow Run for which to fetch artifact read credentials
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// The artifact paths, relative to the Run's artifact root location, for which to
	// fetch artifact read credentials. Must not be empty.
	Path []string `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
	// Token specifying the page of credentials to fetch for large requests that require pagination
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (x *GetCredentialsForRead) Reset() {
	*x = GetCredentialsForRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForRead) ProtoMessage() {}

func (x *GetCredentialsForRead) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForRead.ProtoReflect.Descriptor instead.
func (*GetCredentialsForRead) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{1}
}

func (x *GetCredentialsForRead) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetCredentialsForRead) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetCredentialsForRead) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type GetCredentialsForWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the MLflow Run for which to fetch artifact write credentials
	RunId *string `protobuf:"bytes,1,opt,name=run_id,json=runId" json:"run_id,omitempty"`
	// The artifact paths, relative to the Run's artifact root location, for which to
	// fetch artifact write credentials. Must not be empty.
	Path []string `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
	// Token specifying the page of credentials to fetch for large requests that require pagination
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (x *GetCredentialsForWrite) Reset() {
	*x = GetCredentialsForWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForWrite) ProtoMessage() {}

func (x *GetCredentialsForWrite) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForWrite.ProtoReflect.Descriptor instead.
func (*GetCredentialsForWrite) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{2}
}

func (x *GetCredentialsForWrite) GetRunId() string {
	if x != nil && x.RunId != nil {
		return *x.RunId
	}
	return ""
}

func (x *GetCredentialsForWrite) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetCredentialsForWrite) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

type ArtifactCredentialInfo_HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP header name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The HTTP header value
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *ArtifactCredentialInfo_HttpHeader) Reset() {
	*x = ArtifactCredentialInfo_HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactCredentialInfo_HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactCredentialInfo_HttpHeader) ProtoMessage() {}

func (x *ArtifactCredentialInfo_HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactCredentialInfo_HttpHeader.ProtoReflect.Descriptor instead.
func (*ArtifactCredentialInfo_HttpHeader) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ArtifactCredentialInfo_HttpHeader) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArtifactCredentialInfo_HttpHeader) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GetCredentialsForRead_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credentials for reading from the specified artifact locations
	CredentialInfos []*ArtifactCredentialInfo `protobuf:"bytes,2,rep,name=credential_infos,json=credentialInfos" json:"credential_infos,omitempty"`
	// Token used to fetch the next page of credentials for large requests that require pagination
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *GetCredentialsForRead_Response) Reset() {
	*x = GetCredentialsForRead_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForRead_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForRead_Response) ProtoMessage() {}

func (x *GetCredentialsForRead_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForRead_Response.ProtoReflect.Descriptor instead.
func (*GetCredentialsForRead_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetCredentialsForRead_Response) GetCredentialInfos() []*ArtifactCredentialInfo {
	if x != nil {
		return x.CredentialInfos
	}
	return nil
}

func (x *GetCredentialsForRead_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type GetCredentialsForWrite_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credentials for writing to the specified artifact locations
	CredentialInfos []*ArtifactCredentialInfo `protobuf:"bytes,2,rep,name=credential_infos,json=credentialInfos" json:"credential_infos,omitempty"`
	// Token used to fetch the next page of credentials for large requests that require pagination
	NextPageToken *string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (x *GetCredentialsForWrite_Response) Reset() {
	*x = GetCredentialsForWrite_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_databricks_artifacts_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCredentialsForWrite_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCredentialsForWrite_Response) ProtoMessage() {}

func (x *GetCredentialsForWrite_Response) ProtoReflect() protoreflect.Message {
	mi := &file_databricks_artifacts_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCredentialsForWrite_Response.ProtoReflect.Descriptor instead.
func (*GetCredentialsForWrite_Response) Descriptor() ([]byte, []int) {
	return file_databricks_artifacts_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetCredentialsForWrite_Response) GetCredentialInfos() []*ArtifactCredentialInfo {
	if x != nil {
		return x.CredentialInfos
	}
	return nil
}

func (x *GetCredentialsForWrite_Response) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

var File_databricks_artifacts_proto protoreflect.FileDescriptor

var file_databricks_artifacts_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6c,
	0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x70, 0x62, 0x2f, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x02,
	0x0a, 0x16, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x72, 0x69, 0x12, 0x43, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x36, 0x0a, 0x0a, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xce, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xf8,
	0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x83, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x3a, 0x5f, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x50, 0x43,
	0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5d,
	0xe2, 0x3f, 0x31, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x6b, 0x73, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xcf, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xf8, 0x86, 0x19, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x83, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x3a, 0x5f, 0xe2, 0x3f, 0x28, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x50, 0x43, 0x5b, 0x24, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5d, 0xe2, 0x3f, 0x31, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x56, 0x0a, 0x16, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x41, 0x53, 0x5f, 0x55, 0x52,
	0x49, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x57, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x43,
	0x50, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x03, 0x32, 0xe4,
	0x02, 0x0a, 0x20, 0x44, 0x61, 0x74, 0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x4d, 0x6c, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x1a, 0x26, 0x2e, 0x6d,
	0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0xf2, 0x86, 0x19, 0x38, 0x0a, 0x34, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x12, 0x26, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x04, 0x08, 0x02, 0x10, 0x00,
	0x10, 0x03, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x27, 0x2e,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x57, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xf2, 0x86, 0x19, 0x39, 0x0a, 0x35, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x12, 0x27, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x04, 0x08,
	0x02, 0x10, 0x00, 0x10, 0x03, 0x42, 0x5c, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x62, 0x6c, 0x69, 0x6e, 0x6b, 0x2f,
	0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x67,
	0x6f, 0x2f, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x90, 0x01, 0x01, 0xa0, 0x01, 0x01, 0xe2, 0x3f,
	0x02, 0x10, 0x01,
}

var (
	file_databricks_artifacts_proto_rawDescOnce sync.Once
	file_databricks_artifacts_proto_rawDescData = file_databricks_artifacts_proto_rawDesc
)

func file_databricks_artifacts_proto_rawDescGZIP() []byte {
	file_databricks_artifacts_proto_rawDescOnce.Do(func() {
		file_databricks_artifacts_proto_rawDescData = protoimpl.X.CompressGZIP(file_databricks_artifacts_proto_rawDescData)
	})
	return file_databricks_artifacts_proto_rawDescData
}

var file_databricks_artifacts_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_databricks_artifacts_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_databricks_artifacts_proto_goTypes = []interface{}{
	(ArtifactCredentialType)(0),               // 0: mlflow.ArtifactCredentialType
	(*ArtifactCredentialInfo)(nil),            // 1: mlflow.ArtifactCredentialInfo
	(*GetCredentialsForRead)(nil),             // 2: mlflow.GetCredentialsForRead
	(*GetCredentialsForWrite)(nil),            // 3: mlflow.GetCredentialsForWrite
	(*ArtifactCredentialInfo_HttpHeader)(nil), // 4: mlflow.ArtifactCredentialInfo.HttpHeader
	(*GetCredentialsForRead_Response)(nil),    // 5: mlflow.GetCredentialsForRead.Response
	(*GetCredentialsForWrite_Response)(nil),   // 6: mlflow.GetCredentialsForWrite.Response
}
var file_databricks_artifacts_proto_depIdxs = []int32{
	4, // 0: mlflow.ArtifactCredentialInfo.headers:type_name -> mlflow.ArtifactCredentialInfo.HttpHeader
	0, // 1: mlflow.ArtifactCredentialInfo.type:type_name -> mlflow.ArtifactCredentialType
	1, // 2: mlflow.GetCredentialsForRead.Response.credential_infos:type_name -> mlflow.ArtifactCredentialInfo
	1, // 3: mlflow.GetCredentialsForWrite.Response.credential_infos:type_name -> mlflow.ArtifactCredentialInfo
	2, // 4: mlflow.DatabricksMlflowArtifactsService.getCredentialsForRead:input_type -> mlflow.GetCredentialsForRead
	3, // 5: mlflow.DatabricksMlflowArtifactsService.getCredentialsForWrite:input_type -> mlflow.GetCredentialsForWrite
	5, // 6: mlflow.DatabricksMlflowArtifactsService.getCredentialsForRead:output_type -> mlflow.GetCredentialsForRead.Response
	6, // 7: mlflow.DatabricksMlflowArtifactsService.getCredentialsForWrite:output_type -> mlflow.GetCredentialsForWrite.Response
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_databricks_artifacts_proto_init() }
func file_databricks_artifacts_proto_init() {
	if File_databricks_artifacts_proto != nil {
		return
	}
	file_databricks_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_databricks_artifacts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCredentialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactCredentialInfo_HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForRead_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_databricks_artifacts_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCredentialsForWrite_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_databricks_artifacts_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_databricks_artifacts_proto_goTypes,
		DependencyIndexes: file_databricks_artifacts_proto_depIdxs,
		EnumInfos:         file_databricks_artifacts_proto_enumTypes,
		MessageInfos:      file_databricks_artifacts_proto_msgTypes,
	}.Build()
	File_databricks_artifacts_proto = out.File
	file_databricks_artifacts_proto_rawDesc = nil
	file_databricks_artifacts_proto_goTypes = nil
	file_databricks_artifacts_proto_depIdxs = nil
}
